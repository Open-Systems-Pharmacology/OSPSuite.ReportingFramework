% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/WorkflowScriptExporter.R
\docType{class}
\name{WorkflowScriptExporter}
\alias{WorkflowScriptExporter}
\title{WorkflowScriptExporter}
\description{
Manages the export of an ePackage workflow.
}
\keyword{internal}
\section{Super class}{
\code{\link[ospsuite.utils:Printable]{ospsuite.utils::Printable}} -> \code{WorkflowScriptExporter}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{wfIdentifier}}{Identifier of the workflow.}

\item{\code{scenarioNames}}{Relevant scenarios to export.}

\item{\code{workflowRmd}}{Input markdown file for TLF workflow.}

\item{\code{fileNameReplacements}}{List of file name replacements.}

\item{\code{inputFiles}}{Table with all input files.}

\item{\code{changedInputFiles}}{Table with all changed input files.}

\item{\code{configurationSheets}}{A list containing configuration sheets .}

\item{\code{codeChunks}}{# A list with code read in from workflowRmd .}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-WorkflowScriptExporter-new}{\code{WorkflowScriptExporter$new()}}
\item \href{#method-WorkflowScriptExporter-extractCodeChunks}{\code{WorkflowScriptExporter$extractCodeChunks()}}
\item \href{#method-WorkflowScriptExporter-evalCodeChunks}{\code{WorkflowScriptExporter$evalCodeChunks()}}
\item \href{#method-WorkflowScriptExporter-addEPackageConfigurationForPlotting}{\code{WorkflowScriptExporter$addEPackageConfigurationForPlotting()}}
\item \href{#method-WorkflowScriptExporter-exportWorkflowText}{\code{WorkflowScriptExporter$exportWorkflowText()}}
\item \href{#method-WorkflowScriptExporter-addEPackageInputfilesForScenarioNames}{\code{WorkflowScriptExporter$addEPackageInputfilesForScenarioNames()}}
\item \href{#method-WorkflowScriptExporter-addEPackageConfigurationForScenarioNames}{\code{WorkflowScriptExporter$addEPackageConfigurationForScenarioNames()}}
\item \href{#method-WorkflowScriptExporter-exportInputFiles}{\code{WorkflowScriptExporter$exportInputFiles()}}
\item \href{#method-WorkflowScriptExporter-exportConfigSheets}{\code{WorkflowScriptExporter$exportConfigSheets()}}
\item \href{#method-WorkflowScriptExporter-clone}{\code{WorkflowScriptExporter$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkflowScriptExporter-new"></a>}}
\if{latex}{\out{\hypertarget{method-WorkflowScriptExporter-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new instance of the class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkflowScriptExporter$new(
  projectConfiguration,
  wfIdentifier,
  scenarioNames = NULL,
  workflowRmd = NULL,
  fileNameReplacements = c()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectConfiguration}}{An object of class projectConfiguration containing information like paths.}

\item{\code{wfIdentifier}}{A unique identifier for the workflow.}

\item{\code{scenarioNames}}{A vector of scenario names to be included in the workflow (optional).}

\item{\code{workflowRmd}}{Path to the input markdown file for the workflow (optional).}

\item{\code{fileNameReplacements}}{A vector of file name replacements (optional).}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkflowScriptExporter-extractCodeChunks"></a>}}
\if{latex}{\out{\hypertarget{method-WorkflowScriptExporter-extractCodeChunks}{}}}
\subsection{Method \code{extractCodeChunks()}}{
Extract code chunks from the specified R Markdown file.
This method reads the R Markdown file provided in the `workflowRmd` field and extracts code chunks
for further processing. It also ensures that necessary code chunks are present and replaces any
placeholders with the corresponding values from the template.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkflowScriptExporter$extractCodeChunks()}\if{html}{\out{</div>}}
}

\subsection{Details}{
The method will raise an error if required code chunks are missing from the R Markdown file.
It also handles the temporary creation of a script file to read the code chunks.
A timeout mechanism is implemented to ensure that the script file is available for reading.
}

\subsection{Returns}{
Invisible NULL. The function does not return any value but populates the `codeChunks`
        field with the extracted code chunks.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkflowScriptExporter-evalCodeChunks"></a>}}
\if{latex}{\out{\hypertarget{method-WorkflowScriptExporter-evalCodeChunks}{}}}
\subsection{Method \code{evalCodeChunks()}}{
This function evaluates the code chunks extracted from the R Markdown file associated with the workflow.
It iterates through the code chunks, validating and executing them to set up the necessary variables
for the workflow export process. The evaluation includes handling specific chunks related to custom functions,
scenario names, and data import.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkflowScriptExporter$evalCodeChunks()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisible NULL. The function does not return any value but performs evaluations that update the
        internal state of the `WorkflowScriptExporter` object. If successful, the function will complete
        without errors; otherwise, it will raise an informative error if any evaluation fails.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkflowScriptExporter-addEPackageConfigurationForPlotting"></a>}}
\if{latex}{\out{\hypertarget{method-WorkflowScriptExporter-addEPackageConfigurationForPlotting}{}}}
\subsection{Method \code{addEPackageConfigurationForPlotting()}}{
Add referenced plotting sheets to Configuration
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkflowScriptExporter$addEPackageConfigurationForPlotting(
  projectConfiguration
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectConfiguration}}{An object of class projectConfiguration containing information like paths.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisible NULL.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkflowScriptExporter-exportWorkflowText"></a>}}
\if{latex}{\out{\hypertarget{method-WorkflowScriptExporter-exportWorkflowText}{}}}
\subsection{Method \code{exportWorkflowText()}}{
Export workflow text to a file.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkflowScriptExporter$exportWorkflowText(projectConfiguration)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectConfiguration}}{An object of class projectConfiguration containing information like paths.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisible NULL.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkflowScriptExporter-addEPackageInputfilesForScenarioNames"></a>}}
\if{latex}{\out{\hypertarget{method-WorkflowScriptExporter-addEPackageInputfilesForScenarioNames}{}}}
\subsection{Method \code{addEPackageInputfilesForScenarioNames()}}{
Retrieve input files for the ePackage.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkflowScriptExporter$addEPackageInputfilesForScenarioNames(
  projectConfiguration
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectConfiguration}}{An object of class projectConfiguration containing information like paths and filenames.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisible NULL.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkflowScriptExporter-addEPackageConfigurationForScenarioNames"></a>}}
\if{latex}{\out{\hypertarget{method-WorkflowScriptExporter-addEPackageConfigurationForScenarioNames}{}}}
\subsection{Method \code{addEPackageConfigurationForScenarioNames()}}{
Get E-Package Configuration for Scenario Names.
This function retrieves the configuration data for specified scenario names from various Excel sheets
related to a project configuration.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkflowScriptExporter$addEPackageConfigurationForScenarioNames(
  projectConfiguration
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{projectConfiguration}}{A list containing project configuration details, including file paths.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisible NULL.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkflowScriptExporter-exportInputFiles"></a>}}
\if{latex}{\out{\hypertarget{method-WorkflowScriptExporter-exportInputFiles}{}}}
\subsection{Method \code{exportInputFiles()}}{
Export input files to the electronic package folder.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkflowScriptExporter$exportInputFiles()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisible NULL.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkflowScriptExporter-exportConfigSheets"></a>}}
\if{latex}{\out{\hypertarget{method-WorkflowScriptExporter-exportConfigSheets}{}}}
\subsection{Method \code{exportConfigSheets()}}{
Export configuration sheets to the electronic package folder.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkflowScriptExporter$exportConfigSheets()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Invisible NULL.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-WorkflowScriptExporter-clone"></a>}}
\if{latex}{\out{\hypertarget{method-WorkflowScriptExporter-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{WorkflowScriptExporter$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
